import pygame
import os
import random
from random import randint, choice
import csv
import button

pygame.init()


SCREEN_WIDTH = 800
SCREEN_HEIGHT = int(SCREEN_WIDTH * 0.8)

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Shooter')

#set framerate
clock = pygame.time.Clock()
FPS = 60

#define game variables
GRAVITY = 0.75
SCROLL_THRESH = 200
ROWS = 16
COLS = 300
TILE_SIZE = SCREEN_HEIGHT // ROWS
TILE_TYPES = 22
MAX_LEVELS = 3
screen_scroll = 0
bg_scroll = 0 
level = 1
start_game = False 

#define player action variables
moving_left = False
moving_right = False
shoot = False
grenade = False
grenade_thrown = False
shooting_idle = False 
shooting_run = False 

start_img = pygame.image.load('img/button/0.png').convert_alpha()
start_img = pygame.transform.rotozoom(start_img, 0, 2)
exit_img = pygame.image.load('img/button/1.png').convert_alpha()
exit_img = pygame.transform.rotozoom(exit_img, 0, 2)
restart_img = pygame.image.load('img/button/2.png').convert_alpha()
restart_img = pygame.transform.rotozoom(restart_img, 0, 2)



#load images
pine2_img = pygame.image.load('img/Background/pine2.png').convert_alpha()
pine1_img = pygame.image.load('img/Background/pine1.png').convert_alpha()
mountain_img = pygame.image.load('img/Background/mountain.png').convert_alpha()
sky_img = pygame.image.load('img/Background/sky_cloud.png').convert_alpha()
#store tiles in a list
img_list = []
for x in range(TILE_TYPES):
    img = pygame.image.load(f'img/tile/{x}.png')
    img = pygame.transform.scale(img, (TILE_SIZE, TILE_SIZE))
    img_list.append(img)
#bullet
bullet_img = pygame.image.load('img/icons/bullet.png').convert_alpha()
bullet_img = pygame.transform.rotozoom(bullet_img, 0, 0.9)
#grenade
grenade_img = pygame.image.load('img/icons/grenade.png').convert_alpha()
#pick up boxes
health_box_img = pygame.image.load('img/icons/health_box.png').convert_alpha()
grenade_box_img = pygame.image.load('img/icons/grenade_box.png').convert_alpha()
item_boxes = {
    'Health'    : health_box_img,
    'Grenade'   : grenade_box_img
}



#define colours
BG = (144, 201, 120)
RED = (255, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLACK = (0, 0, 0)

#define font
font = pygame.font.SysFont('Futura', 15)

def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))


def draw_bg():
    screen.fill(BG)
    width = sky_img.get_width()
    for x in range(5):
        screen.blit(sky_img, ((x * width) - bg_scroll * 0.5,0))
        screen.blit(mountain_img, ((x * width) - bg_scroll * 0.6, SCREEN_HEIGHT - mountain_img.get_height() - 300))
        screen.blit(pine1_img, ((x * width) - bg_scroll * 0.7, SCREEN_HEIGHT - pine1_img.get_height() - 150))
        screen.blit(pine2_img, ((x * width) - bg_scroll * 0.8, SCREEN_HEIGHT - pine2_img.get_height()))


def reset_level():
    enemy_group.empty()
    bullet_group.empty()
    grenade_group.empty()
    explosion_group.empty()
    item_box_group.empty()
    decoration_group.empty()
    water_group.empty()
    exit_group.empty()
    minion_group.empty()
    
    data = []
    for row in range(ROWS):
        r = [-1] * COLS
        data.append(r)
    return data 
    
    


class Soldier(pygame.sprite.Sprite):
    def __init__(self, char_type, x, y, scale, speed, ammo, grenades):
        pygame.sprite.Sprite.__init__(self)
        self.alive = True
        self.char_type = char_type
        self.speed = speed
        self.ammo = ammo
        self.start_ammo = ammo
        self.shoot_cooldown = 0
        self.grenades = grenades
        self.health = 100
        self.max_health = self.health
        self.direction = 1
        self.vel_y = 0
        self.jump = False
        self.in_air = True
        self.flip = False
        self.animation_list = []
        self.frame_index = 0
        self.action = 0
        self.update_time = pygame.time.get_ticks()
        #ai specific variables
        self.move_counter = 0
        self.vision = pygame.Rect(0, 0, 150, 20)
        self.idling = False
        self.idling_counter = 0
        
        #load all images for the players
        animation_types = ['Idle', 'Run', 'Jump', 'Death', 'Shoot_Idle', 'Shoot_Run']
        for animation in animation_types:
            #reset temporary list of images
            temp_list = []
            #count number of files in the folder
            num_of_frames = len(os.listdir(f'img/{self.char_type}/{animation}')) - 1
            for i in range(num_of_frames):
                img = pygame.image.load(f'img/{self.char_type}/{animation}/{i}.png').convert_alpha()
                img = pygame.transform.scale(img, (int(img.get_width() * scale), int(img.get_height() * scale)))
                temp_list.append(img)
            self.animation_list.append(temp_list)

        self.image = self.animation_list[self.action][self.frame_index]
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.width = self.image.get_width()
        self.height = self.image.get_height()


    def update(self):
        self.update_animation()
        self.check_alive()
        #update cooldown
        if self.shoot_cooldown > 0:
            self.shoot_cooldown -= 1


    def move(self, moving_left, moving_right):
        #reset movement variables
        screen_scroll = 0
        dx = 0
        dy = 0

        #assign movement variables if moving left or right
        if moving_left:
            dx = -self.speed
            self.flip = True
            self.direction = -1
        if moving_right:
            dx = self.speed
            self.flip = False
            self.direction = 1

        #jump
        if self.jump == True and self.in_air == False:
            self.vel_y = -15
            self.jump = False
            self.in_air = True

        #apply gravity
        self.vel_y += GRAVITY
        if self.char_type == 'enemy' or self.char_type == 'player':
            if self.vel_y > 10:
                self.vel_y
            dy += self.vel_y


        #check collision with floor
        for tile in world.obstacle_list:
            if tile[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):
                dx = 0
                if self.char_type == 'enemy':
                    self.direction *= -1
                    self.move_counter = 0 
            if tile[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                if self.vel_y < 0:
                    self.vel_y = 0
                    dy = tile[1].bottom - self.rect.top
                elif self.vel_y >= 0:
                    self.vel_y = 0
                    self.in_air = False
                    dy = tile[1].top - self.rect.bottom

            
        if pygame.sprite.spritecollide(self, water_group, False):
            self.health = 0 
            
        level_complete = False     
        if pygame.sprite.spritecollide(self, exit_group, False):
            level_complete = True 
            
        if self.rect.bottom > SCREEN_HEIGHT:
            self.health = 0

        if self.char_type == 'player':
            if self.rect.left + dx < 0 or self.rect.right > SCREEN_WIDTH:
                dx = 0
        

        #update rectangle position
        self.rect.x += dx
        self.rect.y += dy
        
        if self.char_type == 'player':
            if self.rect.right > SCREEN_WIDTH - SCROLL_THRESH and bg_scroll < (world.level_length * TILE_SIZE) - SCREEN_WIDTH:
                self.rect.x -= dx
                screen_scroll = -dx
            elif (self.rect.left < SCROLL_THRESH + 100 and moving_left == True) and bg_scroll > abs(dx):
                self.rect.x -= dx
                screen_scroll = -dx
                

        return screen_scroll, level_complete

    def shoot(self):
        if self.shoot_cooldown == 0 and self.ammo > 0:
            self.shoot_cooldown = 10
            bullet = Bullet(self.rect.centerx + (1 * self.rect.size[0] * self.direction), self.rect.centery, self.direction)
            bullet_group.add(bullet)
            #reduce ammo
           # self.ammo -= 1


        

    def ai(self):
        if self.alive and player.alive:
            if self.idling == False and random.randint(1, 200) == 1:
                self.update_action(0)#0: idle
                self.idling = True
                self.idling_counter = 50
            #check if the ai in near the player
            if self.vision.colliderect(player.rect):
                #stop running and face the player
                self.update_action(0)#0: idle
                #shoot
                self.shoot()
            else:
                if self.idling == False:
                    if self.direction == 1:
                        ai_moving_right = True
                    else:
                        ai_moving_right = False
                    ai_moving_left = not ai_moving_right
                    self.move(ai_moving_left, ai_moving_right)
                    self.update_action(1)#1: run
                    self.move_counter += 1
                    #update ai vision as the enemy moves
                    self.vision.center = (self.rect.centerx + 75 * self.direction, self.rect.centery)

                    if self.move_counter > TILE_SIZE:
                        self.direction *= -1
                        self.move_counter *= -1
                else:
                    self.idling_counter -= 1
                    if self.idling_counter <= 0:
                        self.idling = False
                        
                        
            self.rect.x += screen_scroll      

  

    def update_animation(self):
        #update animation
        ANIMATION_COOLDOWN = 100
        #update image depending on current frame
        self.image = self.animation_list[self.action][self.frame_index]
        #check if enough time has passed since the last update
        if pygame.time.get_ticks() - self.update_time > ANIMATION_COOLDOWN:
            self.update_time = pygame.time.get_ticks()
            self.frame_index += 1
        #if the animation has run out the reset back to the start
        if self.frame_index >= len(self.animation_list[self.action]):
            if self.action == 3:
                self.frame_index = len(self.animation_list[self.action]) - 1
            else:
                self.frame_index = 0



    def update_action(self, new_action):
        #check if the new action is different to the previous one
        if new_action != self.action:
            self.action = new_action
            #update the animation settings
            self.frame_index = 0
            self.update_time = pygame.time.get_ticks()



    def check_alive(self):
        if self.health <= 0:
            self.health = 0
            self.speed = 0
            self.alive = False
            self.update_action(3)


    def draw(self):
        screen.blit(pygame.transform.flip(self.image, self.flip, False), self.rect)


class World():
    def __init__(self):
        self.obstacle_list = []

    def process_data(self, data):
        self.level_length = len(data[0])
        #iterate through each value in level data file
        for y, row in enumerate(data):
            for x, tile in enumerate(row):
                if tile >= 0:
                    img = img_list[tile]
                    img_rect = img.get_rect()
                    img_rect.x = x * TILE_SIZE
                    img_rect.y = y * TILE_SIZE
                    tile_data = (img, img_rect)
                    if tile >= 0 and tile <= 8:
                        self.obstacle_list.append(tile_data)
                    elif tile >= 9 and tile <= 10:
                        water = Water(img, x * TILE_SIZE, y * TILE_SIZE)
                        water_group.add(water)
                    elif tile >= 11 and tile <= 14:
                        decoration = Decoration(img, x * TILE_SIZE, y * TILE_SIZE)
                        decoration_group.add(decoration)
                    elif tile == 15:#create player
                        player = Soldier('player', x * TILE_SIZE, y * TILE_SIZE, 1, 7, 20, 5)
                        health_bar = HealthBar(10, 10, player.health, player.health)
                    elif tile == 16:#create enemies
                        enemy = Soldier('enemy', x * TILE_SIZE, y * TILE_SIZE, 0.8, 2, 20, 0)
                        enemy_group.add(enemy)
                    elif tile == 18:#create grenade box
                        item_box = ItemBox('Grenade', x * TILE_SIZE, y * TILE_SIZE)
                        item_box_group.add(item_box)
                    elif tile == 19:#create health box
                        item_box = ItemBox('Health', x * TILE_SIZE, y * TILE_SIZE)
                        item_box_group.add(item_box)
                    elif tile == 20:#create exit
                        exit = Exit(img, x * TILE_SIZE, y * TILE_SIZE)
                        exit_group.add(exit)

                        

        return player, health_bar


    def draw(self):
        for tile in self.obstacle_list:
            tile[1][0] += screen_scroll
            screen.blit(tile[0], tile[1])


class Minion(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.rect = self
        self.shoot_cooldown = 0
        self.alive = True 
        health = 100
        self.health = health
        self.max_health = self.health
        minion_frame_1 = pygame.image.load('img/minion/0.png').convert_alpha()
        minion_frame_1 = pygame.transform.rotozoom(minion_frame_1, 0, 0.3)
        minion_frame_2 = pygame.image.load('img/minion/1.png').convert_alpha()
        minion_frame_2 = pygame.transform.rotozoom(minion_frame_2, 0, 0.3)
        minion_frame_3 = pygame.image.load('img/minion/2.png').convert_alpha()
        minion_frame_3 = pygame.transform.rotozoom(minion_frame_3, 0, 0.3)
        minion_frame_4 = pygame.image.load('img/minion/3.png').convert_alpha()
        minion_frame_4 = pygame.transform.rotozoom(minion_frame_4, 0, 0.3)
        minion_frame_5 = pygame.image.load('img/minion/4.png').convert_alpha()
        minion_frame_5 = pygame.transform.rotozoom(minion_frame_5, 0, 0.3)
        minion_frame_6 = pygame.image.load('img/minion/5.png').convert_alpha()
        minion_frame_6 = pygame.transform.rotozoom(minion_frame_6, 0, 0.3)
        md_1 = pygame.image.load('img/minion_death/minion_death1.png').convert_alpha()
        md_1 = pygame.transform.rotozoom(md_1, 0, 0.3)
        md_2 = pygame.image.load('img/minion_death/minion_death2.png').convert_alpha()
        md_2 = pygame.transform.rotozoom(md_2, 0, 0.3)
        md_3 = pygame.image.load('img/minion_death/minion_death3.png').convert_alpha()
        md_3 = pygame.transform.rotozoom(md_3, 0, 0.3)
        md_4 = pygame.image.load('img/minion_death/minion_death4.png').convert_alpha()
        md_4 = pygame.transform.rotozoom(md_4, 0, 0.3)
        md_5 = pygame.image.load('img/minion_death/minion_death5.png').convert_alpha()
        md_5 = pygame.transform.rotozoom(md_5, 0, 0.3)
        md_6 = pygame.image.load('img/minion_death/minion_death6.png').convert_alpha()
        md_6 = pygame.transform.rotozoom(md_6, 0, 0.3)
        md_7 = pygame.image.load('img/minion_death/minion_death7.png').convert_alpha()
        md_7 = pygame.transform.rotozoom(md_7, 0, 0.3)
        md_8 = pygame.image.load('img/minion_death/minion_death8.png').convert_alpha()
        md_8 = pygame.transform.rotozoom(md_8, 0, 0.3)
        md_9 = pygame.image.load('img/minion_death/minion_death9.png').convert_alpha()
        md_9 = pygame.transform.rotozoom(md_9, 0, 0.3)
        md_10 = pygame.image.load('img/minion_death/minion_death10.png').convert_alpha()
        md_10 = pygame.transform.rotozoom(md_10, 0, 0.3)
        md_11 = pygame.image.load('img/minion_death/minion_death11.png').convert_alpha()
        md_11 = pygame.transform.rotozoom(md_11, 0, 0.3)
        md_12 = pygame.image.load('img/minion_death/minion_death12.png').convert_alpha()
        md_12 = pygame.transform.rotozoom(md_12, 0, 0.3)
        md_13 = pygame.image.load('img/minion_death/minion_death13.png').convert_alpha()
        md_13 = pygame.transform.rotozoom(md_13, 0, 0.3)
        md_14 = pygame.image.load('img/minion_death/minion_death14.png').convert_alpha()
        md_14 = pygame.transform.rotozoom(md_14, 0, 0.3)
        md_15 = pygame.image.load('img/minion_death/minion_death15.png').convert_alpha()
        md_15 = pygame.transform.rotozoom(md_15, 0, 0.3)
        md_16 = pygame.image.load('img/minion_death/minion_death16.png').convert_alpha()
        md_16 = pygame.transform.rotozoom(md_16, 0, 0.3)
        md_17 = pygame.image.load('img/minion_death/minion_death17.png').convert_alpha()
        md_17 = pygame.transform.rotozoom(md_17, 0, 0.3)
        md_18 = pygame.image.load('img/minion_death/minion_death18.png').convert_alpha()
        md_18 = pygame.transform.rotozoom(md_18, 0, 0.3)
        md_19 = pygame.image.load('img/minion_death/minion_death19.png').convert_alpha()
        md_19 = pygame.transform.rotozoom(md_19, 0, 0.3)
        md_20 = pygame.image.load('img/minion_death/minion_death20.png').convert_alpha()
        md_20 = pygame.transform.rotozoom(md_20, 0, 0.3)
        md_21 = pygame.image.load('img/minion_death/minion_death21.png').convert_alpha()
        md_21 = pygame.transform.rotozoom(md_21, 0, 0.3)
        md_22 = pygame.image.load('img/minion_death/minion_death22.png').convert_alpha()
        md_22 = pygame.transform.rotozoom(md_22, 0, 0.3)
        md_23 = pygame.image.load('img/minion_death/minion_death23.png').convert_alpha()
        md_23 = pygame.transform.rotozoom(md_23, 0, 0.3)
        md_24 = pygame.image.load('img/minion_death/minion_death23.png').convert_alpha()
        md_24 = pygame.transform.rotozoom(md_24, 0, 0.3)
        md_25 = pygame.image.load('img/minion_death/minion_death25.png').convert_alpha()
        md_25 = pygame.transform.rotozoom(md_25, 0, 0.3)
        md_26 = pygame.image.load('img/minion_death/minion_death26.png').convert_alpha()
        md_26 = pygame.transform.rotozoom(md_26, 0, 0.3)
        md_27 = pygame.image.load('img/minion_death/minion_death27.png').convert_alpha()
        md_27 = pygame.transform.rotozoom(md_27, 0, 0.3)
        md_28 = pygame.image.load('img/minion_death/minion_death28.png').convert_alpha()
        md_28 = pygame.transform.rotozoom(md_28, 0, 0.3)
        md_29 = pygame.image.load('img/minion_death/minion_death29.png').convert_alpha()
        md_29 = pygame.transform.rotozoom(md_29, 0, 0.3)
        md_30 = pygame.image.load('img/minion_death/minion_death30.png').convert_alpha()
        md_30 = pygame.transform.rotozoom(md_30, 0, 0.3)
        md_31 = pygame.image.load('img/minion_death/minion_death31.png').convert_alpha()
        md_31 = pygame.transform.rotozoom(md_31, 0, 0.3)
        md_32 = pygame.image.load('img/minion_death/minion_death32.png').convert_alpha()
        md_32 = pygame.transform.rotozoom(md_32, 0, 0.3)
        md_33 = pygame.image.load('img/minion_death/minion_death33.png').convert_alpha()
        md_33 = pygame.transform.rotozoom(md_33, 0, 0.3)
        md_34 = pygame.image.load('img/minion_death/minion_death34.png').convert_alpha()
        md_34 = pygame.transform.rotozoom(md_34, 0, 0.3)
        self.frames = [minion_frame_1, minion_frame_2, minion_frame_3, minion_frame_4, minion_frame_5, minion_frame_6]
        self.frames1 = [md_1, md_2, md_3, md_4, md_5, md_6, md_7, md_8, md_9, md_10, md_11, md_12, md_13, md_14, md_15, md_16, md_17, md_18, md_19, md_20, md_21, md_22, md_23, md_24, md_25, md_26, md_27, md_28, md_29, md_30, md_31, md_32, md_34]
        self.y_pos = 80
        self.animation_index = 0  
        self.image = self.frames[self.animation_index]
        self.rect = self.image.get_rect(midbottom = (randint(900,9000),self.y_pos))
    
        

    def animation_state(self):
        self.animation_index += 0.1
        if self.animation_index >= len(self.frames): 
            self.animation_index = 0
        self.image = self.frames[int(self.animation_index)]
        
    def animation_state1(self):
        self.animation_index += 0.1
        if self.animation_index >= len(self.frames1): self.animation_index = 0
        self.image = self.frames1[int(self.animation_index)]
        
    def update(self):
        self.destroy()
        self.rect.x -= 8
        if self.alive == True:
            self.attack()
            self.animation_state()
        self.check_alive()
        if self.alive == False:
            self.rect.y += 8
            self.animation_state1()
        self.y_pos += 1
        if self.shoot_cooldown > 0:
            self.shoot_cooldown -= 1
        self.rect.x += screen_scroll

    def destroy(self):
        if self.rect.x <= -100:
            self.kill()
            
    def attack(self):
        
        down = 1 
        down += 1
        y = down  
        self.vision = pygame.Rect(0, 0, 10000, 1000)
        if self.vision.colliderect(player.rect):
            if self.shoot_cooldown == 0:
                self.shoot_cooldown = 40
                grenade = Grenade(self.rect.centerx + (1 * self.rect.size[0]), self.rect.centery, 0)
                grenade_group.add(grenade)
                grenade_thrown = True 
                
    def check_alive(self):
        if self.health <= 0:
            self.health = 0
            self.alive = False
            
            
                


        
        
            
class Decoration(pygame.sprite.Sprite):
    def __init__(self, img, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = img
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))
        
    def update(self):
        self.rect.x += screen_scroll


class Water(pygame.sprite.Sprite):
    def __init__(self, img, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = img
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))
        
    def update(self):
        self.rect.x += screen_scroll


class Exit(pygame.sprite.Sprite):
    def __init__(self, img, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = img
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))
        
    def update(self):
        self.rect.x += screen_scroll



class ItemBox(pygame.sprite.Sprite):
    def __init__(self, item_type, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.item_type = item_type
        self.image = item_boxes[self.item_type]
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))


    def update(self):
        
        self.rect.x += screen_scroll
        #check if the player has picked up the box
        if pygame.sprite.collide_rect(self, player):
            #check what kind of box it was
            if self.item_type == 'Health':
                player.health += 25
                if player.health > player.max_health:
                    player.health = player.max_health
            elif self.item_type == 'Grenade':
                player.grenades += 3
            #delete the item box
            self.kill()


class HealthBar():
    def __init__(self, x, y, health, max_health):
        self.x = x
        self.y = y
        self.health = health
        self.max_health = max_health

    def draw(self, health):
        #update with new health
        self.health = health
        #calculate health ratio
        ratio = self.health / self.max_health
        pygame.draw.rect(screen, BLACK, (self.x - 2, self.y - 2, 154, 24))
        pygame.draw.rect(screen, RED, (self.x, self.y, 150, 20))
        pygame.draw.rect(screen, GREEN, (self.x, self.y, 150 * ratio, 20))


class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y, direction):
        pygame.sprite.Sprite.__init__(self)
        self.speed = 15
        self.image = bullet_img
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.direction = direction

    def update(self):
        #move bullet
        self.rect.x += (self.direction * self.speed) + screen_scroll
        #check if bullet has gone off screen
        if self.rect.right < 0 or self.rect.left > SCREEN_WIDTH:
            self.kill()

        for tile in world.obstacle_list:
            if tile[1].colliderect(self.rect):
                self.kill()

        #check collision with characters
        if pygame.sprite.spritecollide(player, bullet_group, False):
            if player.alive:
                player.health -= 5
                self.kill()
        for enemy in enemy_group:
            if pygame.sprite.spritecollide(enemy, bullet_group, False):
                if enemy.alive:
                    enemy.health -= 25
                    self.kill()
        for minion in minion_group:
            if pygame.sprite.spritecollide(minion, bullet_group, False):
                if minion.alive:
                    minion.health -= 100
                    self.kill()



class Grenade(pygame.sprite.Sprite):
    def __init__(self, x, y, direction):

        pygame.sprite.Sprite.__init__(self)
        self.timer = 50
        self.vel_y = -11
        self.speed = 7
        self.image = grenade_img
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.width = self.image.get_width()
        self.height = self.image.get_height()
        self.direction = direction

    def update(self):
        self.vel_y += GRAVITY
        dx = self.direction * self.speed
        dy = self.vel_y

        #check collision with level
        for tile in world.obstacle_list:
        #check collision with walls
            if tile[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):
                self.direction *= -1
                dx = self.direction * self.speed
            if tile[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                self.speed = 0 
                if self.vel_y < 0:
                    self.vel_y = 0
                    dy = tile[1].bottom - self.rect.top
                elif self.vel_y >= 0:
                    self.vel_y = 0
                    dy = tile[1].top - self.rect.bottom


        #update grenade position
        self.rect.x += dx + screen_scroll
        self.rect.y += dy

        #countdown timer
        self.timer -= 1
        if self.timer <= 0:
            self.kill()
            explosion = Explosion(self.rect.x, self.rect.y, 0.5)
            explosion_group.add(explosion)
            #do damage to anyone that is nearby
            if abs(self.rect.centerx - player.rect.centerx) < TILE_SIZE * 2 and \
                abs(self.rect.centery - player.rect.centery) < TILE_SIZE * 2:
                player.health -= 50
            for enemy in enemy_group:
                if abs(self.rect.centerx - enemy.rect.centerx) < TILE_SIZE * 2 and \
                    abs(self.rect.centery - enemy.rect.centery) < TILE_SIZE * 2:
                    enemy.health -= 50

                    

class Explosion(pygame.sprite.Sprite):
    def __init__(self, x, y, scale):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        for num in range(1, 4):
            img = pygame.image.load(f'img/explosion/{num}.png').convert_alpha()
            img = pygame.transform.scale(img, (int(img.get_width() * scale), int(img.get_height() * scale)))
            self.images.append(img)
        self.frame_index = 0
        self.image = self.images[self.frame_index]
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.counter = 0


    def update(self):
        self.rect.x += screen_scroll
        EXPLOSION_SPEED = 4
        #update explosion amimation
        self.counter += 1

        if self.counter >= EXPLOSION_SPEED:
            self.counter = 0
            self.frame_index += 1
            #if the animation is complete then delete the explosion
            if self.frame_index >= len(self.images):
                self.kill()
            else:
                self.image = self.images[self.frame_index]



start_button = button.Button(SCREEN_WIDTH // 2 - 130, SCREEN_HEIGHT // 2 - 150, start_img, 1)
exit_button = button.Button(SCREEN_WIDTH // 2 - 110, SCREEN_HEIGHT // 2 + 50, exit_img, 1)
restart_button = button.Button(SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2 - 50, exit_img, 2)

#create sprite groups
enemy_group = pygame.sprite.Group()
bullet_group = pygame.sprite.Group()
grenade_group = pygame.sprite.Group()
explosion_group = pygame.sprite.Group()
item_box_group = pygame.sprite.Group()
decoration_group = pygame.sprite.Group()
water_group = pygame.sprite.Group()
exit_group = pygame.sprite.Group()
minion_group = pygame.sprite.Group()
minion = Minion()
minion_group.add(minion)


#create empty tile list
world_data = []
for row in range(ROWS):
    r = [-1] * COLS
    world_data.append(r)
#load in level data and create world
with open(f'level{level}_data.csv', newline='') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    for x, row in enumerate(reader):
        for y, tile in enumerate(row):
            world_data[x][y] = int(tile)
world = World()
player, health_bar = world.process_data(world_data)


ob_timer = pygame.USEREVENT + 1 
pygame.time.set_timer(ob_timer, 1400)

run = True
while run:

    clock.tick(FPS)
    
    if start_game == False:
        screen.fill(BG)
        if start_button.draw(screen):
            start_game = True
        if exit_button.draw(screen):
            run = False 
        
    else:

        #update background
        draw_bg()
        #draw world map
        world.draw()
        #show player health
        health_bar.draw(player.health)
        #show ammo
        # draw_text('AMMO: ', font, WHITE, 10, 40)
        #for x in range(player.ammo):
        #   small_bullet = pygame.transform.rotozoom(bullet_img, 0, 0.6)
        #  screen.blit(small_bullet, (90 + (x * 10), 35))
        #show grenades
        draw_text('GRENADES: ', font, WHITE, 10, 52)
        for x in range(player.grenades):
            small_grenade = pygame.transform.rotozoom(grenade_img, 0, 0.7)
            screen.blit(small_grenade, (100 + (x * 35), 45))

        
        
        player.update()
        player.draw()
        

        for enemy in enemy_group:
            
            enemy.ai()
            enemy.update()
            enemy.draw()

        #update and draw groups
        bullet_group.update()
        grenade_group.update()
        explosion_group.update()
        item_box_group.update()
        decoration_group.update()
        water_group.update()
        exit_group.update()
        minion_group.update()
        bullet_group.draw(screen)
        grenade_group.draw(screen)
        explosion_group.draw(screen)
        item_box_group.draw(screen)
        decoration_group.draw(screen)
        water_group.draw(screen)
        exit_group.draw(screen)
        minion_group.draw(screen)

        #update player actions
        if player.alive:
            #shoot bullets
            if shoot:
                player.shoot()
            #throw grenades
            elif grenade and grenade_thrown == False and player.grenades > 0:
                grenade = Grenade(player.rect.centerx + (0.5 * player.rect.size[0] * player.direction),\
                            player.rect.top, player.direction)
                grenade_group.add(grenade)
                #reduce grenades
                player.grenades -= 1
                grenade_thrown = True
            if player.in_air:
                player.update_action(2)#2: jump
            elif moving_left or moving_right:
                if shoot:
                    player.update_action(5)
                else:
                    player.update_action(1)#1: run
            elif shooting_idle == True:
                player.update_action(4)#4: shooting idle 
            else:
                player.update_action(0)#0: idle
            screen_scroll, level_complete = player.move(moving_left, moving_right)
            bg_scroll -= screen_scroll
            if level_complete:
                level += 1
                bg_scroll = 0
                world_data = reset_level()
                if level <= MAX_LEVELS:
                    with open(f'level{level}_data.csv', newline='') as csvfile:
                        reader = csv.reader(csvfile, delimiter=',')
                        for x, row in enumerate(reader):
                            for y, tile in enumerate(row):
                                world_data[x][y] = int(tile)
                    world = World()
                    player, health_bar = world.process_data(world_data)
                        
                
        else:
            screen_scroll = 0
            if restart_button.draw(screen):
                bg_scroll = 0
                world_data = reset_level()
                with open(f'level{level}_data.csv', newline='') as csvfile:
                    reader = csv.reader(csvfile, delimiter=',')
                    for x, row in enumerate(reader):
                        for y, tile in enumerate(row):
                            world_data[x][y] = int(tile)
                world = World()
                player, health_bar = world.process_data(world_data)
                 


    for event in pygame.event.get():
        #quit game
        if event.type == pygame.QUIT:
            run = False
        #keyboard presses
        
        if event.type == ob_timer:
            minion_group.add(Minion())
    
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                moving_left = True
            if event.key == pygame.K_RIGHT:
                moving_right = True
            if event.key == pygame.K_w:
                if moving_left == False and moving_right == False:
                    shoot = True
                    shooting_idle = True
            if event.key == pygame.K_w:
                if moving_left == True or moving_right == True:
                    shoot = True
                    shooting_run = True 
            if event.key == pygame.K_e:
                grenade = True
            if event.key == pygame.K_SPACE and player.alive:
                player.jump = True
            if event.key == pygame.K_ESCAPE:
                run = False


        #keyboard button released
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                moving_left = False
            if event.key == pygame.K_RIGHT:
                moving_right = False
            if event.key == pygame.K_w:
                if moving_left == False and moving_right == False:
                    shoot = False
                    shooting_idle = False
                if moving_right == True or moving_left == True:
                    shoot = False 
                    shooting_run = False                  
            if event.key == pygame.K_e:
                grenade = False
                grenade_thrown = False


    pygame.display.update()

pygame.quit()
